name: Build, test and release

on:
  push:
    # branches:
    #   - main

  # pull_request:
  #   branches:
  #     - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 2

    steps:
      - name: Enable egress filtering
        uses: bullfrogsec/bullfrog@v0.3
        with:
          egress-policy: audit
      - name: Checkout
        uses: actions/checkout@v4
      - name: Bootstrap
        run: |
          make bootstrap
      - name: Build the go agent
        working-directory: ./agent
        run: |
          make build
      - name: Build the action dist
        working-directory: ./action
        run: |
          make build
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            agent/agent
            action/dist

  test-audit:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
    timeout-minutes: 2

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - name: Enable egress filtering
        uses: ./
        with:
          allowed-domains: |
            *.google.com

      - name: Make HTTP requests
        run: |
          curl https://www.google.com --output /dev/null
          curl https://www.bing.com --max-time 3 --output /dev/null

  # block:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-22.04, ubuntu-24.04]
  #   timeout-minutes: 2

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Enable egress filtering
  #       uses: ./
  #       with:
  #         allowed-domains: |
  #           *.google.com
  #         egress-policy: block

  #     - name: Make HTTP requests
  #       run: source test/make_http_requests.sh

  #     - name: Make DNS requests
  #       run: |
  #         if dig example.com; then
  #           echo 'Expected 'dig example.com' to fail, but it succeeded';
  #           exit 1;
  #         fi;

  #         if dig www.wikipedia.org; then
  #           echo 'Expected 'dig www.wikipedia.org' to fail, but it succeeded';
  #           exit 1;
  #         fi;

  # block-but-allow-any-dns-requests:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-22.04, ubuntu-24.04]
  #   timeout-minutes: 2

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Enable egress filtering
  #       uses: ./
  #       with:
  #         allowed-domains: |
  #           *.google.com
  #         block-dns: false
  #         egress-policy: block

  #     - name: Make HTTP requests
  #       run: source test/make_http_requests.sh

  #     - name: Make DNS requests
  #       run: |
  #         dig example.com
  #         dig www.wikipedia.org

  # docker:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-22.04, ubuntu-24.04]
  #   timeout-minutes: 2

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Enable egress filtering
  #       uses: ./
  #       with:
  #         allowed-domains: |
  #           production.cloudflare.docker.com
  #           docker.io
  #           *.docker.io
  #           www.google.com
  #         egress-policy: block

  #     - name: Test curl calls within Docker
  #       run: |
  #         docker run --rm --entrypoint sh alpine/curl:8.7.1 -c "
  #           if ! curl https://www.google.com --max-time 5 --output /dev/null; then
  #             echo 'Expected curl to www.google.com to succeed, but it failed';
  #             exit 1;
  #           fi;

  #           if curl https://www.bing.com --max-time 5 --output /dev/null; then
  #             echo 'Expected curl to www.bing.com to fail, but it succeeded';
  #             exit 1;
  #           fi;
  #         "

  update-dist:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    needs: [build, test-audit]
    steps:
      - name: Enable egress filtering
        uses: bullfrogsec/bullfrog@v0.3
        with:
          egress-policy: audit
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.BULLFROG_BOT_PAT }}
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update dist"
          file_pattern: "action/dist/*"
          commit_user_name: Bullfrog Bot # defaults to "github-actions[bot]"
          commit_user_email: bot@bullfrogsec.com # defaults to "41898282+github-actions[bot]@users.noreply.github.com"
          commit_author: bullfrog-bot <bot@bullfrogsec.com> # defaults to "username <username@users.noreply.github.com>", where "username" belongs to the author of the commit that triggered the run

  release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    needs: [build, audit]
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      - uses: googleapis/release-please-action@v3
        if: github.event_name == 'push'
        id: release
        with:
          release-type: go
          target-branch: release
  publish:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      packages: write
    needs: release
    # this if statements ensure that a publication only occurs when
    # a new release is created:
    if: ${{ needs.release.outputs.release_created }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: agent
          path: agent
      - name: Upload Release Artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ needs.release.outputs.tag_name }} agent
